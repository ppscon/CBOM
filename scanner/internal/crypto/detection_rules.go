package crypto

// buildDetectionRules creates detection rules with NIST IR 8547 information
func buildDetectionRules() []DetectionRule {
	return []DetectionRule{
		// RSA Detection Rules (NIST Table 2 - Quantum-Vulnerable)
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "RSA",
			Method:            "Function Name",
			Pattern:           `RSA\.encrypt|RSACipher|rsa\.newkeys|rsa\.generate_private_key|public_key\.encrypt|private_key\.decrypt|private_key\.sign|KeyPairGenerator\.getInstance\("RSA"\)|crypto\.generateKeyPairSync\('rsa'`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "RSA encryption is vulnerable to quantum attacks using Shor's algorithm, which can factor large integers in polynomial time",
			Recommendation:    "Replace with quantum-resistant algorithm ML-KEM (CRYSTALS-Kyber) for key encapsulation or consider hybrid approaches",
			NISTAlgorithmID:   "RSA-2048", // Default to common key size
		},
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "RSA",
			Method:            "Import Statement",
			Pattern:           `from cryptography\.hazmat\.primitives\.asymmetric import rsa|import rsa|import java.security.KeyPairGenerator|const crypto = require\('crypto'\)`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "RSA cryptography libraries are vulnerable to quantum attacks using Shor's algorithm",
			Recommendation:    "Replace with NIST-standardized post-quantum cryptography libraries using ML-KEM",
			NISTAlgorithmID:   "RSA-2048",
		},
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "RSA",
			Method:            "Configuration",
			Pattern:           `algorithm = "RSA"|keyGen\.initialize\(2048\)|keysize=2048`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "RSA-2048 key generation is vulnerable to quantum attacks",
			Recommendation:    "Replace with ML-KEM (CRYSTALS-Kyber) with appropriate parameter sets",
			NISTAlgorithmID:   "RSA-2048",
		},
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "RSA",
			Method:            "Configuration",
			Pattern:           `keyGen\.initialize\(3072\)|keysize=3072`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "RSA-3072 key generation is vulnerable to quantum attacks",
			Recommendation:    "Replace with ML-KEM (CRYSTALS-Kyber) with appropriate parameter sets",
			NISTAlgorithmID:   "RSA-3072",
		},
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "RSA",
			Method:            "Configuration",
			Pattern:           `keyGen\.initialize\(4096\)|keysize=4096`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "RSA-4096 key generation is vulnerable to quantum attacks",
			Recommendation:    "Replace with ML-KEM (CRYSTALS-Kyber) with appropriate parameter sets",
			NISTAlgorithmID:   "RSA-4096",
		},

		// ECDSA Detection Rules (NIST Table 2 - Quantum-Vulnerable)
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "ECDSA",
			Method:            "Function Name",
			Pattern:           `ECDSA|ecdsa\.Sign|ecdsa\.GenerateKey|SigningKey\.generate\(curve=SECP|SigningKey\.generate\(curve=NIST`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "ECDSA (Elliptic Curve Digital Signature Algorithm) is vulnerable to quantum attacks",
			Recommendation:    "Replace with quantum-resistant signature schemes like ML-DSA or SLH-DSA",
			NISTAlgorithmID:   "ECDSA-P256",
		},
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "ECDSA",
			Method:            "Configuration",
			Pattern:           `secp256r1|prime256v1|P-256|NIST P-256`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "ECDSA with P-256 curve is vulnerable to quantum attacks",
			Recommendation:    "Replace with ML-DSA (CRYSTALS-Dilithium) for quantum-resistant signatures",
			NISTAlgorithmID:   "ECDSA-P256",
		},
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "ECDSA",
			Method:            "Configuration",
			Pattern:           `secp384r1|P-384|NIST P-384`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "ECDSA with P-384 curve is vulnerable to quantum attacks",
			Recommendation:    "Replace with ML-DSA (CRYSTALS-Dilithium) for quantum-resistant signatures",
			NISTAlgorithmID:   "ECDSA-P384",
		},
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "ECDSA",
			Method:            "Configuration",
			Pattern:           `secp521r1|P-521|NIST P-521`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "ECDSA with P-521 curve is vulnerable to quantum attacks",
			Recommendation:    "Replace with ML-DSA (CRYSTALS-Dilithium) for quantum-resistant signatures",
			NISTAlgorithmID:   "ECDSA-P521",
		},

		// EdDSA Detection Rules (NIST Table 2 - Quantum-Vulnerable)
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "EdDSA",
			Method:            "Function Name",
			Pattern:           `EdDSA|Ed25519|Ed448|SigningKey\.generate\(curve=Ed25519|ed25519\.Sign|ed25519\.GenerateKey`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "EdDSA (Edwards-curve Digital Signature Algorithm) is vulnerable to quantum attacks",
			Recommendation:    "Replace with ML-DSA (CRYSTALS-Dilithium) for quantum-resistant signatures",
			NISTAlgorithmID:   "EdDSA-Ed25519",
		},

		// ECC General Detection
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "ECC",
			Method:            "Function Name",
			Pattern:           `ECDSA\.sign|ECCCipher|SigningKey\.generate|ec\.generate_private_key`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "Elliptic Curve Cryptography is vulnerable to quantum attacks using a variant of Shor's algorithm",
			Recommendation:    "Replace with quantum-resistant ML-DSA (CRYSTALS-Dilithium) or SLH-DSA (SPHINCS+) for digital signatures",
			NISTAlgorithmID:   "ECDSA-P256",
		},
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "ECC",
			Method:            "Import Statement",
			Pattern:           `from cryptography\.hazmat\.primitives\.asymmetric import ec|from ecdsa import SigningKey`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "Elliptic Curve Cryptography libraries are vulnerable to quantum attacks",
			Recommendation:    "Replace with post-quantum signature schemes like ML-DSA or SLH-DSA",
			NISTAlgorithmID:   "ECDSA-P256",
		},

		// Diffie-Hellman Detection (NIST Table 4 - Quantum-Vulnerable)
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "DH",
			Method:            "Function Name",
			Pattern:           `DHParameterSpec|DHGenParameterSpec|DiffieHellmanGroup|createDiffieHellman`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "Diffie-Hellman key exchange is vulnerable to quantum attacks via the discrete logarithm problem",
			Recommendation:    "Replace with ML-KEM (CRYSTALS-Kyber) for quantum-resistant key exchange",
			NISTAlgorithmID:   "DH-2048",
		},
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "DH",
			Method:            "Import Statement",
			Pattern:           `import javax.crypto.spec.DHParameterSpec|const dh = crypto.createDiffieHellman`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "Diffie-Hellman library imports indicate vulnerable key exchange methods",
			Recommendation:    "Replace with post-quantum key encapsulation mechanisms like ML-KEM",
			NISTAlgorithmID:   "DH-2048",
		},

		// ECDH Detection (NIST Table 4 - Quantum-Vulnerable)
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "ECDH",
			Method:            "Function Name",
			Pattern:           `ECDH|ECDiffieHellman|ecdh\.ECDH|crypto\.createECDH|X25519|X448`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "Elliptic Curve Diffie-Hellman is vulnerable to quantum attacks on elliptic curve discrete logarithm",
			Recommendation:    "Replace with ML-KEM (CRYSTALS-Kyber) for quantum-resistant key exchange",
			NISTAlgorithmID:   "ECDH-P256",
		},

		// DSA Detection (NIST Table 2 - Quantum-Vulnerable)
		{
			AlgorithmType:     "PublicKey",
			AlgorithmName:     "DSA",
			Method:            "Function Name",
			Pattern:           `DSA|DSAPublicKey|DSAPrivateKey|KeyPairGenerator\.getInstance\("DSA"|dsa\.GenerateParameters|dsa\.Sign`,
			RiskLevel:         "High",
			VulnerabilityType: "Shor's Algorithm",
			Description:       "DSA (Digital Signature Algorithm) is vulnerable to quantum attacks on discrete logarithm problem",
			Recommendation:    "Replace with ML-DSA (CRYSTALS-Dilithium) or SLH-DSA (SPHINCS+) for quantum-resistant signatures",
			NISTAlgorithmID:   "RSA-2048", // DSA typically has similar security to RSA-2048
		},

		// AES Detection (NIST Table 6 - Symmetric)
		{
			AlgorithmType:     "SymmetricKey",
			AlgorithmName:     "AES-128",
			Method:            "Function Name",
			Pattern:           `AES\.encrypt|AESCipher|Cipher\.getInstance\("AES|crypto\.createCipheriv\('aes-128-cbc'|aes128`,
			RiskLevel:         "Medium",
			VulnerabilityType: "Grover's Algorithm",
			Description:       "AES-128 provides only 64 bits of security against quantum attacks using Grover's algorithm",
			Recommendation:    "Upgrade to AES-256 which provides adequate security against known quantum attacks",
			NISTAlgorithmID:   "AES-128",
		},
		{
			AlgorithmType:     "SymmetricKey",
			AlgorithmName:     "AES-192",
			Method:            "Function Name",
			Pattern:           `aes-192|AES192|algorithms\.AES\(key_192|KeyGenerator\.getInstance\("AES"\)\.init\(192\)|crypto\.createCipheriv\('aes-192`,
			RiskLevel:         "Low",
			VulnerabilityType: "Grover's Algorithm",
			Description:       "AES-192 provides 96 bits of security against quantum attacks, which is considered adequate",
			Recommendation:    "AES-192 provides sufficient quantum resistance. Consider AES-256 for maximum security",
			NISTAlgorithmID:   "AES-192",
		},
		{
			AlgorithmType:     "SymmetricKey",
			AlgorithmName:     "AES-256",
			Method:            "Function Name",
			Pattern:           `aes-256|AES256|algorithms\.AES\(key_256|KeyGenerator\.getInstance\("AES"\)\.init\(256\)|crypto\.createCipheriv\('aes-256`,
			RiskLevel:         "Low",
			VulnerabilityType: "Grover's Algorithm",
			Description:       "AES-256 provides 128 bits of security against quantum attacks, which is excellent",
			Recommendation:    "AES-256 provides strong quantum resistance. No action needed",
			NISTAlgorithmID:   "AES-256",
		},

		// DES and 3DES Detection (Deprecated/Broken)
		{
			AlgorithmType:     "SymmetricKey",
			AlgorithmName:     "DES",
			Method:            "Function Name",
			Pattern:           `DES\.encrypt|DESCipher|Cipher\.getInstance\("DES|crypto\.createCipheriv\('des'|des\.New\(\)`,
			RiskLevel:         "High",
			VulnerabilityType: "Grover's Algorithm + Broken",
			Description:       "DES is cryptographically broken with only 56-bit keys, providing minimal security against any attack",
			Recommendation:    "Replace with AES-256 immediately. DES should never be used in production",
			NISTAlgorithmID:   "", // DES is not in NIST IR 8547 tables
		},
		{
			AlgorithmType:     "SymmetricKey",
			AlgorithmName:     "3DES",
			Method:            "Function Name",
			Pattern:           `3DES|TripleDES|DESede|Cipher\.getInstance\("DESede|crypto\.createCipheriv\('des-ede3'|des3\.New\(\)`,
			RiskLevel:         "High",
			VulnerabilityType: "Grover's Algorithm",
			Description:       "3DES provides inadequate security with effective 112-bit strength, vulnerable to quantum attacks",
			Recommendation:    "Replace with AES-256. 3DES is deprecated and should not be used",
			NISTAlgorithmID:   "", // 3DES is deprecated
		},

		// Hash Functions (NIST Table 7)
		{
			AlgorithmType:     "Hash",
			AlgorithmName:     "MD5",
			Method:            "Function Name",
			Pattern:           `MD5|MessageDigest\.getInstance\("MD5"\)|hashlib\.md5|crypto\.createHash\('md5'\)|md5\.New\(\)|MD5CryptoServiceProvider|md5_hex|md5sum`,
			RiskLevel:         "High",
			VulnerabilityType: "Grover's Algorithm + Broken",
			Description:       "MD5 is cryptographically broken and provides only 64 bits of security against quantum attacks",
			Recommendation:    "Replace with SHA-256 or SHA-3 for non-cryptographic uses, or BLAKE3 for performance-critical applications",
			NISTAlgorithmID:   "", // MD5 is not in NIST IR 8547
		},
		{
			AlgorithmType:     "Hash",
			AlgorithmName:     "SHA-1",
			Method:            "Function Name",
			Pattern:           `SHA1|MessageDigest\.getInstance\("SHA-1"\)|hashlib\.sha1|crypto\.createHash\('sha1'\)|sha1\.New\(\)|SHA1CryptoServiceProvider|sha1_hex|sha1sum`,
			RiskLevel:         "High",
			VulnerabilityType: "Grover's Algorithm + Broken",
			Description:       "SHA-1 is cryptographically broken and provides only 80 bits of security against quantum attacks",
			Recommendation:    "Replace with SHA-256 minimum, or SHA-3 for new applications",
			NISTAlgorithmID:   "SHA-1",
		},
		{
			AlgorithmType:     "Hash",
			AlgorithmName:     "SHA-256",
			Method:            "Function Name",
			Pattern:           `SHA256|MessageDigest\.getInstance\("SHA-256"\)|hashlib\.sha256|crypto\.createHash\('sha256'\)|sha256\.New\(\)|SHA256CryptoServiceProvider|sha256_hex`,
			RiskLevel:         "Low",
			VulnerabilityType: "Grover's Algorithm",
			Description:       "SHA-256 provides 128 bits of security against quantum attacks, which is considered adequate",
			Recommendation:    "SHA-256 remains secure against known quantum attacks. Consider SHA-3 for new applications",
			NISTAlgorithmID:   "SHA-256",
		},
		{
			AlgorithmType:     "Hash",
			AlgorithmName:     "SHA-512",
			Method:            "Function Name",
			Pattern:           `SHA512|MessageDigest\.getInstance\("SHA-512"\)|hashlib\.sha512|crypto\.createHash\('sha512'\)|sha512\.New\(\)|SHA512CryptoServiceProvider`,
			RiskLevel:         "Low",
			VulnerabilityType: "Grover's Algorithm",
			Description:       "SHA-512 provides 256 bits of security against quantum attacks, which is very strong",
			Recommendation:    "SHA-512 provides excellent quantum resistance. No immediate action needed",
			NISTAlgorithmID:   "SHA-512",
		},
		{
			AlgorithmType:     "Hash",
			AlgorithmName:     "SHA-3",
			Method:            "Function Name",
			Pattern:           `SHA3|sha3_256|sha3_512|Keccak|SHAKE128|SHAKE256`,
			RiskLevel:         "Low",
			VulnerabilityType: "Grover's Algorithm",
			Description:       "SHA-3 family provides strong security against quantum attacks",
			Recommendation:    "SHA-3 is quantum-resistant with appropriate output sizes. Recommended for new applications",
			NISTAlgorithmID:   "SHA3-256",
		},

		// Post-Quantum Algorithms (NIST Tables 3 & 5)
		{
			AlgorithmType:     "PostQuantum",
			AlgorithmName:     "ML-KEM",
			Method:            "Function Name",
			Pattern:           `ML_KEM|ML-KEM|mlkem|Kyber1024|Kyber768|Kyber512`,
			RiskLevel:         "Low",
			VulnerabilityType: "Quantum-Resistant",
			Description:       "ML-KEM (Module-Lattice-Based Key-Encapsulation Mechanism) is NIST's standardized version of Kyber",
			Recommendation:    "NIST-approved quantum-resistant key encapsulation mechanism",
			NISTAlgorithmID:   "ML-KEM-768",
		},
		{
			AlgorithmType:     "PostQuantum",
			AlgorithmName:     "ML-DSA",
			Method:            "Function Name",
			Pattern:           `ML_DSA|ML-DSA|mldsa|Dilithium5|Dilithium3|Dilithium2`,
			RiskLevel:         "Low",
			VulnerabilityType: "Quantum-Resistant",
			Description:       "ML-DSA (Module-Lattice-Based Digital Signature Algorithm) is NIST's standardized version of Dilithium",
			Recommendation:    "NIST-approved quantum-resistant digital signature algorithm",
			NISTAlgorithmID:   "ML-DSA-65",
		},
		{
			AlgorithmType:     "PostQuantum",
			AlgorithmName:     "CRYSTALS-Kyber",
			Method:            "Import Statement",
			Pattern:           `import pqcrypto.kem.kyber|from kyber import Kyber`,
			RiskLevel:         "Low",
			VulnerabilityType: "Quantum-Resistant",
			Description:       "CRYSTALS-Kyber is a NIST-standardized post-quantum key encapsulation mechanism",
			Recommendation:    "Correctly implemented, this algorithm provides resistance to known quantum attacks",
			NISTAlgorithmID:   "ML-KEM-768",
		},
		{
			AlgorithmType:     "PostQuantum",
			AlgorithmName:     "CRYSTALS-Dilithium",
			Method:            "Import Statement",
			Pattern:           `import pqcrypto.sign.dilithium|from dilithium import Dilithium`,
			RiskLevel:         "Low",
			VulnerabilityType: "Quantum-Resistant",
			Description:       "CRYSTALS-Dilithium is a NIST-standardized post-quantum digital signature algorithm",
			Recommendation:    "Correctly implemented, this algorithm provides resistance to known quantum attacks",
			NISTAlgorithmID:   "ML-DSA-65",
		},
		{
			AlgorithmType:     "PostQuantum",
			AlgorithmName:     "SPHINCS+",
			Method:            "Import Statement",
			Pattern:           `sphincs|SPHINCS|pqcrypto\.sign\.sphincs|from sphincsplus import`,
			RiskLevel:         "Low",
			VulnerabilityType: "Quantum-Resistant",
			Description:       "SPHINCS+ (SLH-DSA) is a NIST-standardized hash-based signature scheme",
			Recommendation:    "Provides strong quantum resistance through hash-based cryptography",
			NISTAlgorithmID:   "SLH-DSA-SHA2-128f",
		},

		// Additional patterns for specific implementations
		{
			AlgorithmType:     "SymmetricKey",
			AlgorithmName:     "ChaCha20",
			Method:            "Function Name",
			Pattern:           `ChaCha20|chacha20|Cipher\.getInstance\("ChaCha20|crypto\.createCipheriv\('chacha20'|chacha20poly1305\.New`,
			RiskLevel:         "Low",
			VulnerabilityType: "Grover's Algorithm",
			Description:       "ChaCha20 with 256-bit keys provides 128 bits of security against quantum attacks",
			Recommendation:    "ChaCha20 provides strong quantum resistance. Suitable for continued use",
			NISTAlgorithmID:   "", // ChaCha20 not in NIST tables but has 256-bit keys
		},
		{
			AlgorithmType:     "Hash",
			AlgorithmName:     "BLAKE2",
			Method:            "Function Name",
			Pattern:           `BLAKE2|blake2b|blake2s|Blake2b\.New|Blake2s\.New`,
			RiskLevel:         "Low",
			VulnerabilityType: "Grover's Algorithm",
			Description:       "BLAKE2 provides strong security against quantum attacks with good performance",
			Recommendation:    "BLAKE2 is quantum-resistant. Consider BLAKE3 for even better performance",
			NISTAlgorithmID:   "", // BLAKE2 not in NIST tables
		},
		{
			AlgorithmType:     "Hash",
			AlgorithmName:     "BLAKE3",
			Method:            "Function Name",
			Pattern:           `BLAKE3|blake3|Blake3\.New`,
			RiskLevel:         "Low",
			VulnerabilityType: "Grover's Algorithm",
			Description:       "BLAKE3 provides strong security against quantum attacks with excellent performance",
			Recommendation:    "BLAKE3 is quantum-resistant and recommended for new applications requiring high performance",
			NISTAlgorithmID:   "", // BLAKE3 not in NIST tables
		},
	}
}